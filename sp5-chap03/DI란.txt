chapter 3. 스프링 DI

1. 의존이란?

DI(Dependency Injection) : 의존주입
여기서 말하는 의존은 객체간의 의존을 말한다.

간단히 예를 들자면 

public class MemberRegisterService{
    private MemberDao memberDao = new MmberDao();
    memberDao.insertMember();
    ...
}

이런식으로 "한 클래스 내부에서 다른 클래스의 메소드를 사용할 때" 
java에서는 "의존"한다고 표현한다.

의존 : 변경에 의해 영향을 받는 관계.

----------------------------------------------------------------------------------
----------------------------------------------------------------------------------

2. 의존 DI는 왜 필요한가?
변경의 유연함!!!

의존 관계는 유지보수 관점에 있어서 문제를 일으킬 수 있다. 
예를 들어 

MemberDao의 기능을 확장하려 다른 클래스에 상속하였다고 가정하면
public class CachedMemberDao extends MemberDao{
    ...
}

위처럼 MmberDao객체를 선언한 모든곳에서 아래처럼 수정해야한다.
public class MemberRegisterService{
    private MemberDao memberDao = new CachedMemberDao();
    ...
}

이건 심각한 시간낭비!! 자원낭비 이다.

이를 di가 해결할 수 있다.

----------------------------------------------------------------------------------
----------------------------------------------------------------------------------

3. DI를 통한 의존처리
DI는 의존하는 객체를 직접 생성하는 대신 의존객체를 전달받는 방식을 사용.

앞에서 선언한 방식을 다음과 같이 구현가능하다.

public class MemberRegisterService {
    private MemberDao memberDao;

    public MemberRegisterService(MemberDao memberDao){
        this.memberDao = memberDao;
    }

    ...
}

// 실제 사용하는 부분
MemberDao dao = new MemberDao();
MemberRegisterService svc = new MemberRegisterService(dao);

위와 같은 방법으로 직접 생성하지 않고 생성자를 통해 객체를 주입한다.





